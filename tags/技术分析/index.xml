<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术分析 on Yangzw</title>
    <link>/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/</link>
    <description>Recent content in 技术分析 on Yangzw</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 31 Aug 2022 19:29:59 +0800</lastBuildDate><atom:link href="/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>实现电子签名涉及哪些步骤？</title>
      <link>/posts/%E7%94%B5%E5%AD%90%E7%AD%BE%E5%90%8D%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Wed, 31 Aug 2022 19:29:59 +0800</pubDate>
      
      <guid>/posts/%E7%94%B5%E5%AD%90%E7%AD%BE%E5%90%8D%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B/</guid>
      <description> 签名者身份确认：首先需要确认签名者的身份，确认签名者的身份可以通过各种方式实现，比如用户账号、身份证号码、手机号码等。 签名生成：签名生成过程中，需要通过加密算法生成签名值，保证签名的不可伪造性和不可篡改性。 签名验证：签名验证是指在签署电子合同时，需要对签名者身份进行验证，同时对签名值进行验证，以确保签名的有效性和完整性。 存证：存证是指将签名信息存储到可信的存证平台上，以便后续的证明和追溯。 </description>
    </item>
    
    <item>
      <title>外键的使用场景</title>
      <link>/posts/%E6%95%B0%E6%8D%AE%E5%BB%BA%E8%A1%A8%E5%A4%96%E9%94%AE%E4%BD%BF%E7%94%A8%E6%9D%A1%E4%BB%B6/</link>
      <pubDate>Wed, 24 Aug 2022 19:01:52 +0800</pubDate>
      
      <guid>/posts/%E6%95%B0%E6%8D%AE%E5%BB%BA%E8%A1%A8%E5%A4%96%E9%94%AE%E4%BD%BF%E7%94%A8%E6%9D%A1%E4%BB%B6/</guid>
      <description>1.互联网行业：不推荐使用外键。
1.用户量大，并发度高，为此数据库服务器很容易成为性能瓶颈，尤其受IO能力限制，且不能轻易地水平扩展
2.若是把数据一致性的控制放到事务中，即让应用服务器承担此部分的压力
3.应用服务器一般都是可以做到轻松地水平的伸缩
2.传统行业：可以使用。
1.软件应用的人数有限，换句话说是可控的
2.数据库服务器的数据量也一般不会超大，且活跃数据有限</description>
    </item>
    
    <item>
      <title>进程、线程、协程三者区别</title>
      <link>/posts/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Mon, 18 Jul 2022 21:09:12 +0800</pubDate>
      
      <guid>/posts/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B/</guid>
      <description>进程 进程是操作系统资源分配的最小单元，它拥有独立的地址空间、独立的内存和数据栈，其间通信需要通过进程间通信（IPC）机制。
线程 线程是进程的执行单元，一个进程可以有多个线程，它们共享进程的地址空间和数据栈，但是每个线程都有自己的执行栈和程序计数器。线程之间可以通过共享内存等方式直接通信，同时也可以通过互斥锁、信号量等机制实现同步和互斥。
协程 协程是一种轻量级的线程，也可以称为协作式多任务。协程与线程类似，但是它们的调度和切换不是由操作系统控制，而是由程序自身控制。协程的数据和栈都在程序的堆上分配，不会像线程一样占用操作系统的资源。因此，协程的创建和销毁非常快，切换也非常高效，可以大大提高程序的并发性和吞吐量。协程的主要作用是在单线程内实现并发，解决传统多线程并发编程中的线程切换、锁竞争等问题，同时也可以用于实现异步编程、事件驱动等场景。在Python、Go、Lua等语言中，协程已经成为了非常重要的编程范式，被广泛用于网络编程、高性能计算等领域。</description>
    </item>
    
    <item>
      <title>软件开发各版本含义</title>
      <link>/posts/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%89%88%E6%9C%AC/</link>
      <pubDate>Fri, 01 Jul 2022 18:33:29 +0800</pubDate>
      
      <guid>/posts/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%89%88%E6%9C%AC/</guid>
      <description>Alpha版本 处于软件开发过程初期阶段，通常只提供内部测试或部分用户测试使用，存在较多问题和漏洞。
Beta版本 处于软件开发过程中期阶段，软件功能基本全部实现，但仍存在一些问题和漏洞，此时通常会向广泛的用户群体发布测试版本，以收集反馈和改进软件。
RC版本 处于软件开发过程后期阶段，软件功能不再存在较大变动，此时会发布该候选版本（Release Candidate, 简称RC），并通过测试和反馈来进一步优化和改进软件。
正式版本 软件发布前的最终版本，此时软件已经通过多轮测试，并修复了各种问题和漏洞，通常是最稳定和可靠的版本。
版本号命名规则：常见的版本号包括三位或四位数字，例如1.0.0或1.0.0.0，其中第一位表示主版本号，第二位表示次版本号，第三位表示修订号或补丁号。</description>
    </item>
    
    <item>
      <title>系统架构需要考虑哪些方面？</title>
      <link>/posts/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Mon, 20 Jun 2022 20:29:02 +0800</pubDate>
      
      <guid>/posts/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</guid>
      <description> 业务需求：需要考虑业务需求，以确定架构的范围和功能，以及架构的可扩展性。 技术选型：需要考虑技术选型，以确定架构的技术架构，以及技术的可扩展性。 架构设计：需要考虑架构设计，以确定架构的组件、模块、接口、数据库等，以及架构的可维护性。 性能优化：需要考虑性能优化，以确定架构的性能指标，以及架构的可优化性。 安全性：需要考虑安全性，以确定架构的安全措施，以及架构的可安全性。 </description>
    </item>
    
  </channel>
</rss>
